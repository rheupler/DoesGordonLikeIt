{"version":3,"sources":["main.js"],"names":["url","API_KEY","document","addEventListener","$","submit","e","preventDefault","formValue","val","html","getRequest","value","searchTerm","params","part","key","maxResults","q","getJSON","showResults","userValue","instanceCounter","body","innerHTML","ramsayValue","fail","jqxhr","textStatus","err","status","results","entries","items","each","index","title","snippet","thumbnail","thumbnails","default","videoLink","id","videoId","description","videoItem","video","videoEmbed","videoEmbedId","URL","str","regExp","RegExp","match","length","click","animate","scrollTop"],"mappings":"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","file":"main.min.js","sourcesContent":["const url = \"https://www.googleapis.com/youtube/v3/search\";\nconst API_KEY = \"AIzaSyBZAOICmYahmk5fgmWE5MLXju6jZQpYabA\";\n\n/** Search form handling **/\ndocument.addEventListener('DOMContentLoaded', () => {\n  $('.search-form').submit(function (e) {\n    e.preventDefault();\n    let formValue = $('.query').val();\n    if ( formValue === \"\" ) { return $(\"h1\").html(\"Cannot be blank\") };\n    getRequest(formValue);\n  });\n\n  $('.query').value = null;\n});\n\n/** Function that makes API request;\n * @param {String} string               Value of form submission\n */\n function getRequest(formValue) {\n   let searchTerm = `Gordon Ramsay ${formValue}`;\n   let params = {\n     part: 'snippet',\n     key: API_KEY,\n     maxResults: 10,\n     q: searchTerm\n   };\n\n   $.getJSON(url, params, function (q) {\n     showResults(q);\n     const userValue = instanceCounter(document.body.innerHTML, `${formValue}`);\n     const ramsayValue = instanceCounter(document.body.innerHTML, \"ramsay\");\n     if ( userValue > 3 && ramsayValue > 3 ) {\n       $(\"h1\").html(\"He seems to have some strong opinions on that\");\n     } else {\n       $(\"h1\").html(\"I don't think he cares about that so much\");\n     }\n   })\n\n   .fail(function(jqxhr, textStatus) {\n      const err = `Request Failed ${jqxhr.status} ${textStatus}`\n    });\n }\n\n/** Function that returns list of videos from YouTube API\n * @param {String} string               Will return list of results from API\n */\nfunction showResults(results) {\n  let html = \"\";\n  let entries = results.items;\n\n\n  $.each(entries, (index, value) => {\n    if ( value === null ) { throw \"Something went wrong\" };\n    let title = value.snippet.title;\n    let thumbnail = value.snippet.thumbnails.default.url;\n    let videoLink = value.id.videoId;\n    html += `\n      <div class=\"card video-items\" onclick=\"videoItem('${videoLink}')\" data-video-link=\"${videoLink}\">\n        <li>${title}</li>\n        <img src=\"${thumbnail}\"/>\n        <p class=\"video-description\">${value.snippet.description}</p>\n      </div>\n          `;\n  });\n\n  $('.results').html(html);\n}\n\n/** Function embeds YouTube video when given video ID;\n * @param {String} string               Video ID\n */\nfunction videoItem(video) {\n  let videoEmbed = \"\";\n  const videoEmbedId = video;\n  const URL = `https://www.youtube.com/embed/${videoEmbedId}`;\n\n  videoEmbed += `<iframe className=\"embed-responsive-item\" width=\"560\" height=\"315\" src=${URL}></iframe>`\n  $(\".video-embed\").html(videoEmbed);\n}\n\n/** Function that count occurrences of a substring in a string;\n * @param {String} string               The string\n * @param {String} subString            Term you want to count\n */\n function instanceCounter(str, value) {\n   const regExp = new RegExp(value, \"gi\");\n   return (str.match(regExp) || []).length;\n }\n\n$('.results-container').click(function(){\n    $(\"html, body\").animate({ scrollTop: 0 }, 600);\n    return;\n });\n"]}